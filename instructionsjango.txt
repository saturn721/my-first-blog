инструкции к джанго
python manage.py shell шелл джанго
python3 -m venv myvenv  создаем виртуальное окружение myvenv - имя виртуального окружения

~/djangogirls$ source myvenv/bin/activate запуск виртуального окружения или . myvenv/bin/activate должен появиться префикс командной строки (myvenv)

(myvenv) ~$ pip install django==1.8 установка джанго

django-admin startproject mysite . создание нового проекта mystite

python manage.py migrate создаем базу данных сайта sqlite3

python manage.py runserver запускаем сервер по умолчанию http://127.0.0.1:8000/

(myvenv) ~/djangogirls$ python manage.py startapp blog создаем отделное приложение, блог в проекте

python manage.py createsuperuser создаем суперпользователя

После того как приложение создано, нам нужно сообщить Django, что теперь он должен его использовать. Мы сделаем это через файл mysite/settings.py. Нам нужно найти INSTALLED_APPS и добавить к списку 'blog', прямо перед ). Конечный результат должен выглядеть следующим образом:

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
)

Модель записи блога создается в файле blog/models.py
Создаем таблицы моделей в базе данных

Последним шагом будет добавление нашей модели в базу данных. Сначала мы должны дать Django знать, что сделали изменения в нашей модели (мы её только что создали!). Набери python manage.py makemigrations blog. Должно получиться примерно так:

(myvenv) ~/djangogirls$ python manage.py makemigrations blog
Migrations for 'blog':
  0001_initial.py:
  - Create model Post
Django создал для нас файл с миграцией для базы данных. Набери python manage.py migrate blog, результат должен быть следующим:

(myvenv) ~/djangogirls$ python manage.py migrate blog
Operations to perform:
  Apply all migrations: blog
Running migrations:
  Rendering model states... DONE
  Applying blog.0001_initial... OK
Ура! Модель записи для блога теперь в базе данных,

Чтобы добавлять, редактировать и удалять записи, для которых мы только сделали модель, нам потребуется использовать права администратора в Django.

Давай откроем файл blog/admin.py и заменим его содержимое на:

from django.contrib import admin
from .models import Post

admin.site.register(Post)
Как ты можешь заметить, мы импортировали (включили) модель Post, которая была определена в предыдущей главе. Чтобы наша модель стала доступна на странице администрирования, нам нужно зарегистрировать её при помощи admin.site.register(Post).

Хорошо, теперь нам нужно взглянуть на модель Post. Не забудь запустить веб-сервер командой python manage.py runserver. Перейди в браузер и набери адрес http://127.0.0.1:8000/admin/

-------- git ----------

$ git init
Initialized empty Git repository in ~/djangogirls/.git/
$ git config --global user.name "Your Name"
$ git config --global user.email you@example.com

Git будет отслеживать изменения всех файлов и каталогов в заданной директории, однако некоторые из них мы предпочли бы игнорировать. Для этого нам нужно создать файл .gitignore в корневом каталоге репозитория. Открой редактор и создай новый файл со следующим содержанием:

*.pyc
__pycache__
myvenv
db.sqlite3
.DS_Store

git status возвращает информацию обо всех ранее неотслеживаемых/изменённых/добавленных в git файлах

$ git add --all .
$ git commit -m "My Django Girls app, first commit" сохраняем все изменения

----------- github ---------

$ git remote add origin https://github.com/<your-github-username>/my-first-blog.git
$ git push -u origin master

--------- pythonanythere ----------


загрузим наш код из GitHub на PythonAnywhere, создав "клон" репозитория. Введи следующую команду в консоли на PythonAnywhere (не забудь заменить <your-github-username> на свою учётку GitHub):

$ git clone https://github.com/<your-github-username>/my-first-blog.git

устанавливаем окружение

оздать виртуальное окружение на PythonAnywhere. В Bash консоли введи следующую команду:

$ cd my-first-blog

$ virtualenv --python=python3.4 myvenv
Running virtualenv with interpreter /usr/bin/python3.4
[...]
Installing setuptools, pip...done.

$ source myvenv/bin/activate

(myvenv) $  pip install django whitenoise
Collecting django
[...]
Successfully installed django-1.8.2 whitenoise-2.0

python manage.py collectstatic работа со статическими файлами 

python manage.py migrate инициализируем базу данных

python manage.py createsuperuser создаем суперюзера


